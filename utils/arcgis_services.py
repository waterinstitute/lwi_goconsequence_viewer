"""This file contains all the functions to edit the XML generated by the ArcGIS Server REST API"""

import xml.dom.minidom as DOM


def configure_mapserver_capabilities(sddraftPath, capabilities):
    """Function to configure MapServer properties"""
    # Read the .sddraft file
    doc = DOM.parse(sddraftPath)

    # Find all elements named TypeName
    # This is where the additional layers and capabilities are defined
    typeNames = doc.getElementsByTagName("TypeName")
    for typeName in typeNames:
        # Get the TypeName to enable
        if typeName.firstChild.data == "MapServer":
            extension = typeName.parentNode
            for extElement in extension.childNodes:
                if extElement.tagName == "Definition":
                    for propArray in extElement.childNodes:
                        if propArray.tagName == "Info":
                            for propSet in propArray.childNodes:
                                for prop in propSet.childNodes:
                                    for prop1 in prop.childNodes:
                                        if prop1.tagName == "Key":
                                            if (
                                                prop1.firstChild.data
                                                == "WebCapabilities"
                                            ):
                                                if prop1.nextSibling.hasChildNodes():
                                                    prop1.nextSibling.firstChild.data = capabilities
                                                else:
                                                    txt = doc.createTextNode(
                                                        capabilities
                                                    )
                                                    prop1.nextSibling.appendChild(txt)
    # Write to the .sddraft file
    f = open(sddraftPath, "w")
    doc.writexml(f)
    f.close()


def activate_cache(ssdraftPath):
    doc = DOM.parse(ssdraftPath)

    configProps = doc.getElementsByTagName("ConfigurationProperties")[0]
    propArray = configProps.firstChild
    propSets = propArray.childNodes
    for propSet in propSets:
        keyValues = propSet.childNodes
        for keyValue in keyValues:
            if keyValue.tagName == "Key":
                if keyValue.firstChild.data == "isCached":
                    keyValue.nextSibling.firstChild.data = "true"

    # update sddraft file
    f = open(ssdraftPath, "w")
    doc.writexml(f)
    f.close()


def change_cache_dir(cache_dir: str, sddraftPath: str):
    # Parse the sddraft
    doc = DOM.parse(sddraftPath)

    property_set_properties = doc.getElementsByTagName("PropertySetProperty")
    for prop in property_set_properties:
        key_element = prop.getElementsByTagName("Key")[0]
        if key_element.firstChild.data == "cacheDir":
            value_element = prop.getElementsByTagName("Value")[0]
            if value_element:
                if value_element.firstChild is None:
                    # Create a text node for the <Value> element if it doesn't exist
                    text_node = doc.createTextNode(cache_dir)
                    value_element.appendChild(text_node)
                else:
                    value_element.firstChild.data = cache_dir

    # Save the modified sddraft back to a file
    with open(sddraftPath, "w") as sddraft_file:
        doc.writexml(sddraft_file)

    print("cacheDir property updated.")


def share_options(
    SharetoOrganization: str,
    SharetoEveryone: str,
    SharetoGroup: str,
    sddraftPath: str,
    GroupID=None,
):
    docs = DOM.parse(sddraftPath)
    key_list = docs.getElementsByTagName("Key")
    value_list = docs.getElementsByTagName("Value")
    for i in range(key_list.length):
        if key_list[i].firstChild.nodeValue == "PackageUnderMyOrg":
            value_list[i].firstChild.nodeValue = SharetoOrganization
        if key_list[i].firstChild.nodeValue == "PackageIsPublic":
            value_list[i].firstChild.nodeValue = SharetoEveryone
        if key_list[i].firstChild.nodeValue == "PackageShareGroups":
            value_list[i].firstChild.nodeValue = SharetoGroup
        if (
            SharetoGroup == "true"
            and key_list[i].firstChild.nodeValue == "PackageGroupIDs"
        ):
            value_list[i].firstChild.nodeValue = GroupID
    with open(sddraftPath, "w") as sddraft_file:
        docs.writexml(sddraft_file)


def edit_scales(ssdraftPath, minScale, maxScale):
    doc = DOM.parse(ssdraftPath)
    iteminfo = doc.getElementsByTagName("ItemInfo")
    item_info = iteminfo.item(0)
    configProps = doc.getElementsByTagName("ConfigurationProperties")[0]
    propArray = configProps.firstChild
    propSets = propArray.childNodes
    for propSet in propSets:
        keyValues = propSet.childNodes
        for keyValue in keyValues:
            if keyValue.tagName == "Key":
                if keyValue.firstChild.data == "minScale":
                    keyValue.nextSibling.firstChild.data = minScale
                if keyValue.firstChild.data == "maxScale":
                    keyValue.nextSibling.firstChild.data = maxScale

    min_scale_element = item_info.getElementsByTagName("MinScale")[0]
    max_scale_element = item_info.getElementsByTagName("MaxScale")[0]

    # Update the values
    min_scale_element.firstChild.nodeValue = minScale
    max_scale_element.firstChild.nodeValue = maxScale
    # update sddraft file
    f = open(ssdraftPath, "w")
    doc.writexml(f)
    f.close()
